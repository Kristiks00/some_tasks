/*
Написать шаблонную функцию myremove, принимающую две пары итераторов: диапазон элементов, содержащих номера удаляемых элементов, диапазон элементов, содержащих элементы, подлежащие удалению. Элементы, подлежащие удалению, в диапазоне нумеруются с нуля. Номера элементов отражают позиции элементов на момент начала работы программы. Если номер повторяется более одного раза, все вхождения, кроме первого, игнорируются. Если номер элемента недопустим, он игнорируется.

Функция возвращает итератор на конец сжатой последовательности во втором контейнере.

Для удаляемых элементов может быть запрещено копирование.
*/
#include <set>
#include <algorithm>

template<typename T, typename P>
P myremove(T a, T b, P c, P d)
{
    std::set<typename T::value_type> s{};
    for (auto i = a; i != b; ++i) {
        s.insert(*i);
    }
    size_t pos = 0;
    auto i1 = c, i2 = c;
    while (i2 != d) {
        if (s.find(pos) == s.end()) {
            std::swap(*i1, *i2);
            ++i1;
        }
        ++i2;
        ++pos;
    }
    return i1;
}
